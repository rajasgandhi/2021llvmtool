{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["programData","require","graphnodes","graphedges","App","i","length","key","hasOwnProperty","node","id","label","title","push","myArrSerialized","map","e","JSON","stringify","mySetSerialized","Set","myUniqueArrSerialized","parse","getNodes","j","from","to","getEdges","useState","network","setNetwork","nodePopUp","setNodePopUp","edgePopUp","setEdgePopUp","funcName","setFuncName","numCallers","setNumCallers","funcBody","setFuncBody","callsFunctions","setCallsFunctions","argumentList","setArgumentList","fromNode","setFromNode","toNode","setToNode","graphHeight","Math","round","parseInt","window","innerHeight","graph","nodes","edges","options","layout","color","height","autoResize","interaction","events","selectNode","event","console","log","toString","showNodePopUp","selectEdge","connectedNodes","getConnectedNodes","showEdgePopUp","hideNodePopUp","hideEdgePopUp","className","style","width","getNetwork","Modal","show","onHide","Header","closeButton","Title","Body","Footer","Button","variant","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mtGAOIA,EAAcC,EAAQ,KAEtBC,EAAa,GACbC,EAAa,GAyKFC,MAxHf,YA/CA,WACEF,EAAa,GACb,IAAK,IAAIG,EAAI,EAAGA,EAAIL,EAAYM,OAAQD,IACtC,IAAK,IAAIE,KAAOP,EAAYK,GAE1B,GAAIL,EAAYK,GAAGG,eAAeD,GAAM,CACtC,IAAIE,EAAO,CACTC,GAAIH,EACJI,MAAOJ,EACPK,MAAO,iBAAmBL,GAE5BL,EAAWW,KAAKJ,GAOtB,IAAIK,EAAkBZ,EAAWa,KAAI,SAACC,GAAD,OAAOC,KAAKC,UAAUF,MACrDG,EAAkB,IAAIC,IAAIN,GAE1BO,EAAqB,YAAOF,GAClCjB,EAAamB,EAAsBN,KAAI,SAACC,GAAD,OAAOC,KAAKK,MAAMN,MA0BzDO,GArBF,WACE,IAAK,IAAIlB,EAAI,EAAGA,EAAIL,EAAYM,OAAQD,IACtC,IAAK,IAAIE,KAAOP,EAAYK,GAC1B,GAAIL,EAAYK,GAAGG,eAAeD,GAChC,IACE,IAAIiB,EAAI,EACRA,EAAIxB,EAAYK,GAAGE,GAAf,gBAAuCD,OAC3CkB,IAEArB,EAAWU,KAAK,CACdY,KAAMlB,EACNmB,GAAI1B,EAAYK,GAAGE,GAAf,gBAAuCiB,KAWrDG,GACA,MAA8BC,mBAAS,MAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAgCN,mBAAS,IAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAAoCR,mBAAS,IAA7C,mBAAOS,EAAP,KAAmBC,EAAnB,KACA,EAAgCV,mBAAS,IAAzC,mBAAOW,EAAP,KAAiBC,EAAjB,KACA,EAA4CZ,mBAAS,IAArD,mBAAOa,EAAP,KAAuBC,EAAvB,KACA,EAAwCd,mBAAS,IAAjD,mBAAOe,EAAP,KAAqBC,EAArB,KACA,EAAgChB,mBAAS,IAAzC,mBAAOiB,EAAP,KAAiBC,EAAjB,KACA,EAA4BlB,mBAAS,IAArC,mBAAOmB,EAAP,KAAeC,EAAf,KAEMC,EAAcC,KAAKC,MAAMC,SAASC,OAAOC,cAAgB,KAEzDC,EAAQ,CACZC,MAAOtD,EACPuD,MAAOtD,GAGHuD,EAAU,CACdC,OAAQ,GACRF,MAAO,CACLG,MAAO,WAETC,OAAQZ,EACRa,YAAY,EACZC,YAAa,IAKTC,EAAS,CACbC,WAAY,SAAUC,GAEvBC,QAAQC,IAAIF,EAAMV,OACfpB,EAAY8B,EAAMV,OAClBlB,EAActC,EAAYkE,EAAMvD,OAAOuD,EAAMV,OAA/B,mBACdhB,EAAYxC,EAAYkE,EAAMvD,OAAOuD,EAAMV,OAA/B,eACZd,EAAkB1C,EAAYkE,EAAMvD,OAAOuD,EAAMV,OAA/B,gBAAyDa,YAC3EzB,EAAgB5C,EAAYkE,EAAMvD,OAAOuD,EAAMV,OAA/B,cAAuDa,YACvEC,MAEFC,WAAY,SAAUL,GAEpB,IAAMM,EAAiB3C,EAAQ4C,kBAAkBP,EAAMT,OAC9B,MAArBe,EAAe,IAAmC,MAArBA,EAAe,KAC9C1B,EAAY0B,EAAe,GAAGH,YAC9BrB,EAAUwB,EAAe,GAAGH,aAE9BK,OAIEJ,GAAgB,WACpBtC,GAAa,IAGT2C,GAAgB,WACpB3C,GAAa,IAGT0C,GAAgB,WACpBxC,GAAa,IAGT0C,GAAgB,WACpB1C,GAAa,IAGf,OACE,qBAAK2C,UAAU,MAAf,SACE,sBAAKnE,GAAG,cAAcoE,MAAO,CAAEjB,OAAQ,OAAQkB,MAAO,QAAtD,UACE,cAAC,IAAD,CACExB,MAAOA,EACPG,QAASA,EACTM,OAAQA,EACRgB,WAAY,SAACnD,GAEXC,EAAWD,MAIf,eAACoD,EAAA,EAAD,CAAOC,KAAMnD,EAAWoD,OAAQR,GAAhC,UACE,cAACM,EAAA,EAAMG,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACJ,EAAA,EAAMK,MAAP,8BAEF,eAACL,EAAA,EAAMM,KAAP,WACE,gDAAmBpD,KACnB,oDAAuBE,KACvB,gDAAmBE,KACnB,kDAAqBE,KACrB,gDAAmBE,QAErB,cAACsC,EAAA,EAAMO,OAAP,UACE,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAShB,GAArC,wBAKJ,eAACM,EAAA,EAAD,CAAOC,KAAMjD,EAAWkD,OAAQP,GAAhC,UACE,cAACK,EAAA,EAAMG,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACJ,EAAA,EAAMK,MAAP,8BAEF,eAACL,EAAA,EAAMM,KAAP,WACE,4CAAe1C,KACf,0CAAaE,QAEf,cAACkC,EAAA,EAAMO,OAAP,UACE,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAASf,GAArC,8BC7JGgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fb030b8c.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { useState } from \"react\";\nimport Graph from \"react-graph-vis\";\n\nimport { Button, Modal } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nvar programData = require(\"./outputtransformed.json\");\n\nvar graphnodes = [];\nvar graphedges = [];\n\nfunction getNodes() {\n  graphnodes = [];\n  for (var i = 0; i < programData.length; i++) {\n    for (var key in programData[i]) {\n      //console.log(programData[i]);\n      if (programData[i].hasOwnProperty(key)) {\n        var node = {\n          id: key,\n          label: key,\n          title: \"Function name:\" + key,\n        };\n        graphnodes.push(node);\n      }\n    }\n  }\n\n  //console.log(graphnodes);\n\n  let myArrSerialized = graphnodes.map((e) => JSON.stringify(e));\n  const mySetSerialized = new Set(myArrSerialized);\n\n  const myUniqueArrSerialized = [...mySetSerialized];\n  graphnodes = myUniqueArrSerialized.map((e) => JSON.parse(e));\n\n  //console.log(graphnodes);\n}\n\nfunction getEdges() {\n  for (var i = 0; i < programData.length; i++) {\n    for (var key in programData[i]) {\n      if (programData[i].hasOwnProperty(key)) {\n        for (\n          var j = 0;\n          j < programData[i][key][\"calls_functions\"].length;\n          j++\n        ) {\n          graphedges.push({\n            from: key,\n            to: programData[i][key][\"calls_functions\"][j],\n          });\n        }\n      }\n    }\n  }\n  //console.log(graphedges);\n}\n\nfunction App() {\n  getNodes();\n  getEdges();\n  const [network, setNetwork] = useState(null);\n  const [nodePopUp, setNodePopUp] = useState(false);\n  const [edgePopUp, setEdgePopUp] = useState(false);\n  const [funcName, setFuncName] = useState(\"\");\n  const [numCallers, setNumCallers] = useState(\"\");\n  const [funcBody, setFuncBody] = useState(\"\");\n  const [callsFunctions, setCallsFunctions] = useState(\"\");\n  const [argumentList, setArgumentList] = useState(\"\");\n  const [fromNode, setFromNode] = useState(\"\");\n  const [toNode, setToNode] = useState(\"\");\n\n  const graphHeight = Math.round(parseInt(window.innerHeight)) + \"px\";\n\n  const graph = {\n    nodes: graphnodes,\n    edges: graphedges,\n  };\n\n  const options = {\n    layout: {},\n    edges: {\n      color: \"#000000\",\n    },\n    height: graphHeight,\n    autoResize: true,\n    interaction: {\n      //hover: true,\n    },\n  };\n\n  const events = {\n    selectNode: function (event) {\n      //console.log(event);\n\t  console.log(event.nodes);\n      setFuncName(event.nodes);\n      setNumCallers(programData[event.label][event.nodes][\"number_of_callers\"]);\n      setFuncBody(programData[event.label][event.nodes][\"function_body\"]);\n      setCallsFunctions(programData[event.label][event.nodes][\"calls_functions\"].toString());\n      setArgumentList(programData[event.label][event.nodes][\"argument_list\"].toString());\n      showNodePopUp();\n    },\n    selectEdge: function (event) {\n      //console.log(event);\n      const connectedNodes = network.getConnectedNodes(event.edges);\n      if (connectedNodes[0] != null && connectedNodes[1] != null) {\n        setFromNode(connectedNodes[0].toString());\n        setToNode(connectedNodes[1].toString());\n      }\n      showEdgePopUp();\n    },\n  };\n\n  const showNodePopUp = () => {\n    setNodePopUp(true);\n  };\n\n  const hideNodePopUp = () => {\n    setNodePopUp(false);\n  };\n\n  const showEdgePopUp = () => {\n    setEdgePopUp(true);\n  };\n\n  const hideEdgePopUp = () => {\n    setEdgePopUp(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <div id=\"treeWrapper\" style={{ height: \"100%\", width: \"100%\" }}>\n        <Graph\n          graph={graph}\n          options={options}\n          events={events}\n          getNetwork={(network) => {\n            //  if you want access to vis.js network api you can set the state in a parent component using this property\n            setNetwork(network);\n          }}\n        />\n\n        <Modal show={nodePopUp} onHide={hideNodePopUp}>\n          <Modal.Header closeButton>\n            <Modal.Title>Modal heading</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <p>Function Name: {funcName}</p>\n            <p>Number of Callers: {numCallers}</p>\n            <p>Function Body: {funcBody}</p>\n            <p>Calls Functions: {callsFunctions}</p>\n            <p>Argument List: {argumentList}</p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={hideNodePopUp}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n        <Modal show={edgePopUp} onHide={hideEdgePopUp}>\n          <Modal.Header closeButton>\n            <Modal.Title>Modal heading</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <p>From node: {fromNode}</p>\n            <p>To node: {toNode}</p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={hideEdgePopUp}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}